From ef3834e610250a9cd2bb09b2137894adba09bd1c Mon Sep 17 00:00:00 2001
From: Asen Alexandrov <alexandrov@vmware.com>
Date: Thu, 3 Nov 2022 18:47:49 +0200
Subject: [PATCH 3/6] Remove files


diff --git a/wasmlabs-README.md b/wasmlabs-README.md
deleted file mode 100644
index c57f0c8a..00000000
--- a/wasmlabs-README.md
+++ /dev/null
@@ -1,85 +0,0 @@
-# About
-
-This contains a non-exhaustive list of changes that we had to make to be able to build the PHP codebase for wasm32-wasi.
-
-To remove or add code for wasm32-wasi builds we are using the 'WASM_WASI' macro.
-
-# emulated functionality
-
-We are using emulation of getpid, signals and clocks.
-
-We are not using mman emulation due to the reasons outlined [below](#mmap-support).
-
-# excluded code
-
-This describes the most common places where we needed to exclude code because
-a method or constant is not available or is somehow different with WASI.
-
-## S_IFSOCK is the same as  S_IFFIFO
-
-WASI snapshot2 is not out yet - https://github.com/nodejs/uvwasi/issues/59.
-
-Thus there is no support for a FIFO filetype. So the two constants were
-defined to the same value. Because of this a switch/case on file type will fail
-due to duplicate case labels.
-
-We've commented out the S_IFFIFO cases.
-
-## setjmp and longjmp
-
-There is no such support in WASI yet.
-
-We have taken a shortcut and just botched the exception handling in the zend
-zend engine. The program will just ignore exceptions as they happen.
-
-## sqlite3 support
-
-We are using sqlite 3.39.2 instead of the original 3.28.0 that goes with php 7.3.33.
-
-Additionally sqlite3 had to be modified in some ways for WASM_WASI builds:
-
- - mark fchmod, fchown as not defined
- - use "dotlockIoFinder" for file locking
- - skip sqlite3_finalize
-
-## unsupported posix methods
-
-We have stubbed the posix methods in `ext/posix/posix.c` which are not supported for WASI.
-
-Other methods, which are direcly used without wrapping were skipped in place by stubbing
-the method that is calling them.
-
-## php flock
-
-File locking is also stubbed and always returns success.
-
-## mmap support
-
-**TL;DR:** 
-
-We are building without MMAP support. To make it work, changes had to be made to zend_alloc.c resulting in a slower but correct behavior.
-
-
-**Details:** 
-
-Take a look [here](https://linux.die.net/man/2/mmap) for the docs for mmap and munmap
-
-The mmap support in wasi-libc is just a rudimentary emulation (as of the wasi-sdk-19 tag).
-
- - mmap uses malloc to reserve the necessary amount of memory (always ignoring the addr hint)
- - mmap zeroes out bytes if MAP_ANONYMOUS is used
- - mmap reads file contents if mapping an fd
- - munmap only supports unmapping of the exact same chunk (addr + size) that was previously mapped - as it is effectively a free of the malloc-ed memory
-
-In the php code there are two places where mman.h is used
-
-1. In zend_alloc.c - for custom memory allocation
-
- - there is code that relies on partial munmap (for the sake of proper alignment at higher level). Using the emulated mmap will lead to leaks here, as munmap fails.
- - there is code that relies on the capability to extend a mmaped chunk - this will fail and lead to performance degradation (falling-back to reallocation)
-
-2. In plain_wrapper.c and zend_stream.c - for reading of the interpreted .php source files
-
- - the tricky thing here is the ZEND_MMAP_AHEAD needed by the zend_language_scanner. The language parser depends on having a bunch of null-terminating characters at the end of the interpreted string. The usual mmap behavior guarantees that when files are mmaped memory is reserved in pages of size `sysconf(_SC_PAGE_SIZE)`, which is padded with `\0`-s after the file contents. However, the emulated mmap does not do that (as it only malloc-s what was requested). This leads to the parser reading random stuff from memory after the mmaped file contents. 
-
-
diff --git a/wasmlabs-build.sh b/wasmlabs-build.sh
deleted file mode 100755
index a4b4da96..00000000
--- a/wasmlabs-build.sh
+++ /dev/null
@@ -1,72 +0,0 @@
-#!/bin/bash
-
-if [[ ! -v WASI_SDK_ROOT ]]
-then
-    echo "Please set WASI_SDK_ROOT and run again"
-    exit 1
-fi
-
-if [[ ! -v WASMLABS_BUILD_OUTPUT ]]
-then
-    echo "Assuming $PWD/wasmlabs-output as WASMLABS_BUILD_OUTPUT"
-    export WASMLABS_BUILD_OUTPUT=$PWD/wasmlabs-output
-    mkdir $WASMLABS_BUILD_OUTPUT 2>&1 >/dev/null
-fi
-
-function onExit {
-    echo "=============================================================="
-    echo "Build progress logs:"
-    cat $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
-}
-trap onExit EXIT
-
-echo "$(date --iso-8601=ns) | Using WASI_SDK_ROOT=$WASI_SDK_ROOT " >  $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
-
-function logStatus {
-    echo "$(date --iso-8601=ns) | $@" >>  $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
-}
-
-export WASI_SYSROOT="${WASI_SDK_ROOT}/share/wasi-sysroot"
-
-export CC=${WASI_SDK_ROOT}/bin/clang
-export LD=${WASI_SDK_ROOT}/bin/wasm-ld
-export CXX=${WASI_SDK_ROOT}/bin/clang++
-export NM=${WASI_SDK_ROOT}/bin/llvm-nm
-export AR=${WASI_SDK_ROOT}/bin/llvm-ar
-export RANLIB=${WASI_SDK_ROOT}/bin/llvm-ranlib
-
-# export CFLAGS_CONFIG="-O3 -g"
-export CFLAGS_CONFIG="-O2"
-
-export CFLAGS_WASI="--sysroot=${WASI_SYSROOT} -D_WASI_EMULATED_GETPID -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_PROCESS_CLOCKS"
-export LDFLAGS_WASI="--sysroot=${WASI_SYSROOT} -lwasi-emulated-getpid -lwasi-emulated-signal -lwasi-emulated-process-clocks"
-
-export CFLAGS_SQLITE='-DSQLITE_OMIT_LOAD_EXTENSION=1'
-export LDFLAGS_SQLITE='-lsqlite3'
-
-export CFLAGS_LIBS="-I$WASMLABS_BUILD_OUTPUT/include"
-export LDFLAGS_LIBS="-L$WASMLABS_BUILD_OUTPUT/lib"
-
-export CFLAGS_PHP='-D_POSIX_SOURCE=1 -D_GNU_SOURCE=1 -DHAVE_FORK=0 -DWASM_WASI'
-
-# We need to add LDFLAGS ot CFLAGS because autoconf compiles(+links) to binary when checking stuff
-export LDFLAGS="$LDFLAGS_WASI $LDFLAGS_LIBS $LDFLAGS_SQLITE"
-export CFLAGS="$CFLAGS_CONFIG $CFLAGS_WASI $CFLAGS_SQLITE $CFLAGS_LIBS $CFLAGS_PHP $LDFLAGS"
-
-logStatus "Generating configure script... "
-./buildconf --force
-
-export PHP_CONFIGURE=' --without-libxml --disable-dom --without-iconv --without-openssl --disable-simplexml --disable-xml --disable-xmlreader --disable-xmlwriter --without-pear --disable-phar --disable-opcache --disable-zend-signals --without-pcre-jit --with-sqlite3 --enable-pdo --with-pdo-sqlite'
-
-logStatus "Configuring build with '$PHP_CONFIGURE'... "
-./configure --host=wasm32-wasi host_alias=wasm32-musl-wasi --target=wasm32-wasi target_alias=wasm32-musl-wasi $PHP_CONFIGURE
-
-logStatus "Building php-cgi... "
-make cgi
-
-logStatus "Preparing artifacts... "
-mkdir -p $WASMLABS_BUILD_OUTPUT/bin 2>/dev/null
-
-cp sapi/cgi/php-cgi $WASMLABS_BUILD_OUTPUT/bin/
-
-logStatus "DONE. Artifacts in $WASMLABS_BUILD_OUTPUT"
-- 
2.38.1

