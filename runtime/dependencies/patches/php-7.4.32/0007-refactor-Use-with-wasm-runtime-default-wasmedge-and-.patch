From a686a21bef82ff15cf22737dcd2f5f1130447cc3 Mon Sep 17 00:00:00 2001
From: "no-reply@wasmlabs.dev" <Wasm Labs Team>
Date: Wed, 7 Dec 2022 10:51:09 +0200
Subject: [PATCH 7/7] refactor: Use --with-wasm-runtime=[default|wasmedge] and
 WASM_RUNTIME_WASMEDGE


   4.4% ext/standard/
  30.9% sapi/cli/
diff --git a/configure.ac b/configure.ac
index 2119baaa..08e53903 100644
--- a/configure.ac
+++ b/configure.ac
@@ -745,25 +745,6 @@ if test "$ac_cv__asm_goto" = yes; then
   AC_DEFINE(HAVE_ASM_GOTO,1,[Define if asm goto support])
 fi
 
-dnl Check wasmedge wasi.
-PHP_ARG_WITH([wasmedge],
-  [whether to build for wasmedge runtime],
-  [AS_HELP_STRING([--with-wasmedge],
-    [Build with support for wasmedge socket extensions])],
-  [yes],
-  [no])
-
-if test "$PHP_WASMEDGE" != "no"; then
-  case $host_alias in
-    *wasm*)
-      PHP_ADD_SOURCES(wasmedge_stubs, wasi_socket_ext.c, -DWASM_WASMEDGE)
-      ;;
-    *)
-      AC_MSG_ERROR([--with-wasmedge is only valid for wasm builds!])
-    ;;
-  esac
-fi
-
 dnl Check valgrind support.
 PHP_ARG_WITH([valgrind],
   [whether to enable valgrind support],
@@ -785,6 +766,28 @@ if test "$PHP_VALGRIND" != "no"; then
   fi
 fi
 
+dnl Check wasm runtime.
+PHP_ARG_WITH([wasm-runtime],
+  [whether to build for a specific wasm runtime],
+  [AS_HELP_STRING([--with-wasm-runtime=RUNTIME],
+    [Build with support for specific runtime. Can be either 'default' or 'wasmedge' [default]])],
+  [default],
+  [no])
+
+if test "$PHP_WASM_RUNTIME" != "default"; then
+  case $host_alias in
+    *wasm*)
+      if test "$PHP_WASM_RUNTIME" = "wasmedge"; then
+        PHP_ADD_SOURCES(wasmedge_stubs, wasi_socket_ext.c, -DWASM_RUNTIME_WASMEDGE)
+        CFLAGS="$CFLAGS -DWASM_RUNTIME_WASMEDGE"
+      fi
+      ;;
+    *)
+      AC_MSG_ERROR([--with-wasm-runtime has meaning only for wasm builds!])
+    ;;
+  esac
+fi
+
 dnl General settings.
 dnl ----------------------------------------------------------------------------
 PHP_CONFIGURE_PART(General settings)
diff --git a/ext/standard/basic_functions.c b/ext/standard/basic_functions.c
index 6f31dda0..3adf1349 100644
--- a/ext/standard/basic_functions.c
+++ b/ext/standard/basic_functions.c
@@ -67,7 +67,7 @@ typedef struct yy_buffer_state *YY_BUFFER_STATE;
 #else
 #include "win32/inet.h"
 #endif
-#elif defined(WASM_WASMEDGE)
+#elif defined(WASM_RUNTIME_WASMEDGE)
 # include "wasmedge_stubs/netdb.h"
 #endif // WASM_WASI
 
diff --git a/sapi/cli/php_cli_server.c b/sapi/cli/php_cli_server.c
index f7d08b06..0e356b77 100644
--- a/sapi/cli/php_cli_server.c
+++ b/sapi/cli/php_cli_server.c
@@ -97,7 +97,7 @@
 
 #include "php_cli_process_title.h"
 
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 #include "wasmedge_stubs/netdb.h"
 #include "wasmedge_stubs/wasi_socket_ext.h"
 #endif
@@ -872,7 +872,7 @@ static void php_cli_server_poller_remove(php_cli_server_poller *poller, int mode
 	}
 #ifndef PHP_WIN32
 	if (fd == poller->max_fd) {
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 		php_socket_t new_max_fd = 0;
 
 		for (int i=0; i< poller->rfds.__nfds; ++i)
@@ -962,7 +962,7 @@ static int php_cli_server_poller_iter_on_active(php_cli_server_poller *poller, v
 	const php_socket_t max_fd = poller->max_fd;
 	WSEDEBUG("php_cli_server_poller_iter_on_active[%d]: max_fd=%d\n", __LINE__, max_fd);
 
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 	// Note this does not keep the order in terms of fd number, when there are both r and w
 
 	for (int i = 0; i < poller->active.rfds.__nfds; ++i)
@@ -997,7 +997,7 @@ static int php_cli_server_poller_iter_on_active(php_cli_server_poller *poller, v
 				}
 		}
 	}
-#endif // WASM_WASMEDGE
+#endif // WASM_RUNTIME_WASMEDGE
 #endif
 	return retval;
 } /* }}} */
@@ -1344,7 +1344,7 @@ static php_socket_t php_network_listen_socket(const char *host, int *port, int s
 
 	int num_addrs = php_network_getaddresses(host, socktype, &sal, errstr);
 	if (num_addrs == 0) {
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 		// This is attempt to copy-paste and initialize the addresses based on the code in php_network_getaddresses,
 		// but I failed to get it right, so it is abandoned (see the commented out free calls at the end of the method)
 		*sal = safe_emalloc(2, sizeof(*sal), 0);
@@ -1366,7 +1366,7 @@ static php_socket_t php_network_listen_socket(const char *host, int *port, int s
 			sa = NULL;
 		}
 
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 		(*p)->sa_family = AF_INET;
 #endif
 
@@ -1389,7 +1389,7 @@ static php_socket_t php_network_listen_socket(const char *host, int *port, int s
 #endif
 		case AF_INET:
 			sa = pemalloc(sizeof(struct sockaddr_in), 1);
-#ifdef WASM_WASMEDGE
+#ifdef WASM_RUNTIME_WASMEDGE
 			memset(sa, 0, sizeof(struct sockaddr_in));
 			((struct sockaddr_in *)sa)->sin_family = AF_INET;
 			((struct sockaddr_in *)sa)->sin_addr.s_addr = INADDR_ANY;
@@ -1439,7 +1439,7 @@ static php_socket_t php_network_listen_socket(const char *host, int *port, int s
 		WSEDEBUG("php_network_listen_socket[%d]: \n", __LINE__);
 		if (*port == 0)
 		{
-#ifndef WASM_WASMEDGE
+#ifndef WASM_RUNTIME_WASMEDGE
 			if (getsockname(retval, sa, socklen)) {
 				err = php_socket_errno();
 				goto out;
@@ -1476,7 +1476,7 @@ static php_socket_t php_network_listen_socket(const char *host, int *port, int s
 	WSEDEBUG("php_network_listen_socket[%d]: \n", __LINE__);
 
 out:
-#ifndef WASM_WASMEDGE
+#ifndef WASM_RUNTIME_WASMEDGE
 	if (sa) {
 		pefree(sa, 1);
 	}
-- 
2.38.1

