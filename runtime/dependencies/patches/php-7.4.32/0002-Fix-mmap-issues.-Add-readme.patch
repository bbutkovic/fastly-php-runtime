From 852ba669904414b138a9d9bfd29fedfc2d85dbe2 Mon Sep 17 00:00:00 2001
From: Asen Alexandrov <alexandrov@vmware.com>
Date: Tue, 1 Nov 2022 15:16:26 +0200
Subject: [PATCH 2/6] Fix mmap issues. Add readme

   8.3% Zend/

   8.3% Zend/

   8.3% Zend/
diff --git a/.gitignore b/.gitignore
index cd6e7798..8d8493ec 100644
--- a/.gitignore
+++ b/.gitignore
@@ -281,3 +281,5 @@ tmp-php.ini
 !/ext/fileinfo/magicdata.patch
 !/ext/pcre/pcre2lib/config.h
 !/win32/build/Makefile
+
+/wasmlabs-output/
diff --git a/Zend/zend_alloc.c b/Zend/zend_alloc.c
index 46e97a30..014801a9 100644
--- a/Zend/zend_alloc.c
+++ b/Zend/zend_alloc.c
@@ -79,7 +79,7 @@
 #include <fcntl.h>
 #include <errno.h>
 
-#ifndef _WIN32
+#if !defined(_WIN32) && HAVE_MMAP
 # include <sys/mman.h>
 # ifndef MAP_ANON
 #  ifdef MAP_ANONYMOUS
@@ -420,6 +420,8 @@ static void *zend_mm_mmap_fixed(void *addr, size_t size)
 {
 #ifdef _WIN32
 	return VirtualAlloc(addr, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
+#elif ! HAVE_MMAP
+	return NULL;
 #else
 	int flags = MAP_PRIVATE | MAP_ANON;
 #if defined(MAP_EXCL)
@@ -458,6 +460,10 @@ static void *zend_mm_mmap(size_t size)
 		return NULL;
 	}
 	return ptr;
+#elif ! HAVE_MMAP
+	void* ptr = malloc(size);
+	memset(ptr, 0, size);
+	return ptr;
 #else
 	void *ptr;
 
@@ -490,6 +496,8 @@ static void zend_mm_munmap(void *addr, size_t size)
 		stderr_last_error("VirtualFree() failed");
 #endif
 	}
+#elif ! HAVE_MMAP
+	free(addr);
 #else
 	if (munmap(addr, size) != 0) {
 #if ZEND_MM_ERROR
@@ -663,6 +671,11 @@ static zend_always_inline int zend_mm_bitset_is_free_range(zend_mm_bitset *bitse
 
 static void *zend_mm_chunk_alloc_int(size_t size, size_t alignment)
 {
+#if ! HAVE_MMAP
+	void* ptr = aligned_alloc(alignment, size);
+	memset(ptr, 0, size);
+	return ptr;
+#else
 	void *ptr = zend_mm_mmap(size);
 
 	if (ptr == NULL) {
@@ -670,9 +683,7 @@ static void *zend_mm_chunk_alloc_int(size_t size, size_t alignment)
 	} else if (ZEND_MM_ALIGNED_OFFSET(ptr, alignment) == 0) {
 #ifdef MADV_HUGEPAGE
 		if (zend_mm_use_huge_pages) {
-#ifndef WASM_WASI
 			madvise(ptr, size, MADV_HUGEPAGE);
-#endif // WASM_WASI
 		}
 #endif
 		return ptr;
@@ -705,14 +716,13 @@ static void *zend_mm_chunk_alloc_int(size_t size, size_t alignment)
 		}
 # ifdef MADV_HUGEPAGE
 		if (zend_mm_use_huge_pages) {
-#ifndef WASM_WASI
 			madvise(ptr, size, MADV_HUGEPAGE);
-#endif // WASM_WASI
 		}
 # endif
 #endif
 		return ptr;
 	}
+#endif
 }
 
 static void *zend_mm_chunk_alloc(zend_mm_heap *heap, size_t size, size_t alignment)
@@ -2790,7 +2800,7 @@ ZEND_API void start_memory_manager(void)
 #else
 	alloc_globals_ctor(&alloc_globals);
 #endif
-#ifndef _WIN32
+#if !defined(_WIN32) && HAVE_MMAP
 #  if defined(_SC_PAGESIZE)
 	REAL_PAGE_SIZE = sysconf(_SC_PAGESIZE);
 #  elif defined(_SC_PAGE_SIZE)
diff --git a/ext/fileinfo/libmagic/fsmagic.c b/ext/fileinfo/libmagic/fsmagic.c
index 4335b5b0..3fd4e574 100644
--- a/ext/fileinfo/libmagic/fsmagic.c
+++ b/ext/fileinfo/libmagic/fsmagic.c
@@ -167,6 +167,7 @@ file_fsmagic(struct magic_set *ms, const char *fn, zend_stat_t *sb)
 # endif
 #endif
 
+#ifndef WASM_WASI
 #ifdef	S_IFIFO
 	case S_IFIFO:
 		if((ms->flags & MAGIC_DEVICES) != 0)
@@ -179,6 +180,7 @@ file_fsmagic(struct magic_set *ms, const char *fn, zend_stat_t *sb)
 			return -1;
 		break;
 #endif
+#endif // WASM_WASI
 #ifdef	S_IFDOOR
 	case S_IFDOOR:
 		if (mime) {
@@ -199,7 +201,6 @@ file_fsmagic(struct magic_set *ms, const char *fn, zend_stat_t *sb)
 	return 1;
 #endif
 
-#ifndef WASM_WASI
 #ifdef	S_IFSOCK
 #ifndef __COHERENT__
 	case S_IFSOCK:
@@ -212,7 +213,6 @@ file_fsmagic(struct magic_set *ms, const char *fn, zend_stat_t *sb)
 		break;
 #endif
 #endif
-#endif // WASM_WASI
 	case S_IFREG:
 		/*
 		 * regular file, check next possibility
diff --git a/ext/standard/filestat.c b/ext/standard/filestat.c
index 97c99ad0..1a1ca5e0 100644
--- a/ext/standard/filestat.c
+++ b/ext/standard/filestat.c
@@ -915,16 +915,16 @@ PHPAPI void php_stat(const char *filename, size_t filename_length, int type, zva
 			RETURN_STRING("link");
 		}
 		switch(ssb.sb.st_mode & S_IFMT) {
+#ifndef WASM_WASI
 		case S_IFIFO: RETURN_STRING("fifo");
+#endif // WASM_WASI
 		case S_IFCHR: RETURN_STRING("char");
 		case S_IFDIR: RETURN_STRING("dir");
 		case S_IFBLK: RETURN_STRING("block");
 		case S_IFREG: RETURN_STRING("file");
-#ifndef WASM_WASI
 #if defined(S_IFSOCK) && !defined(PHP_WIN32)
 		case S_IFSOCK: RETURN_STRING("socket");
 #endif
-#endif // WASM_WASI
 		}
 		php_error_docref(NULL, E_NOTICE, "Unknown file type (%d)", ssb.sb.st_mode&S_IFMT);
 		RETURN_STRING("unknown");
diff --git a/wasmlabs-README.md b/wasmlabs-README.md
new file mode 100644
index 00000000..c57f0c8a
--- /dev/null
+++ b/wasmlabs-README.md
@@ -0,0 +1,85 @@
+# About
+
+This contains a non-exhaustive list of changes that we had to make to be able to build the PHP codebase for wasm32-wasi.
+
+To remove or add code for wasm32-wasi builds we are using the 'WASM_WASI' macro.
+
+# emulated functionality
+
+We are using emulation of getpid, signals and clocks.
+
+We are not using mman emulation due to the reasons outlined [below](#mmap-support).
+
+# excluded code
+
+This describes the most common places where we needed to exclude code because
+a method or constant is not available or is somehow different with WASI.
+
+## S_IFSOCK is the same as  S_IFFIFO
+
+WASI snapshot2 is not out yet - https://github.com/nodejs/uvwasi/issues/59.
+
+Thus there is no support for a FIFO filetype. So the two constants were
+defined to the same value. Because of this a switch/case on file type will fail
+due to duplicate case labels.
+
+We've commented out the S_IFFIFO cases.
+
+## setjmp and longjmp
+
+There is no such support in WASI yet.
+
+We have taken a shortcut and just botched the exception handling in the zend
+zend engine. The program will just ignore exceptions as they happen.
+
+## sqlite3 support
+
+We are using sqlite 3.39.2 instead of the original 3.28.0 that goes with php 7.3.33.
+
+Additionally sqlite3 had to be modified in some ways for WASM_WASI builds:
+
+ - mark fchmod, fchown as not defined
+ - use "dotlockIoFinder" for file locking
+ - skip sqlite3_finalize
+
+## unsupported posix methods
+
+We have stubbed the posix methods in `ext/posix/posix.c` which are not supported for WASI.
+
+Other methods, which are direcly used without wrapping were skipped in place by stubbing
+the method that is calling them.
+
+## php flock
+
+File locking is also stubbed and always returns success.
+
+## mmap support
+
+**TL;DR:** 
+
+We are building without MMAP support. To make it work, changes had to be made to zend_alloc.c resulting in a slower but correct behavior.
+
+
+**Details:** 
+
+Take a look [here](https://linux.die.net/man/2/mmap) for the docs for mmap and munmap
+
+The mmap support in wasi-libc is just a rudimentary emulation (as of the wasi-sdk-19 tag).
+
+ - mmap uses malloc to reserve the necessary amount of memory (always ignoring the addr hint)
+ - mmap zeroes out bytes if MAP_ANONYMOUS is used
+ - mmap reads file contents if mapping an fd
+ - munmap only supports unmapping of the exact same chunk (addr + size) that was previously mapped - as it is effectively a free of the malloc-ed memory
+
+In the php code there are two places where mman.h is used
+
+1. In zend_alloc.c - for custom memory allocation
+
+ - there is code that relies on partial munmap (for the sake of proper alignment at higher level). Using the emulated mmap will lead to leaks here, as munmap fails.
+ - there is code that relies on the capability to extend a mmaped chunk - this will fail and lead to performance degradation (falling-back to reallocation)
+
+2. In plain_wrapper.c and zend_stream.c - for reading of the interpreted .php source files
+
+ - the tricky thing here is the ZEND_MMAP_AHEAD needed by the zend_language_scanner. The language parser depends on having a bunch of null-terminating characters at the end of the interpreted string. The usual mmap behavior guarantees that when files are mmaped memory is reserved in pages of size `sysconf(_SC_PAGE_SIZE)`, which is padded with `\0`-s after the file contents. However, the emulated mmap does not do that (as it only malloc-s what was requested). This leads to the parser reading random stuff from memory after the mmaped file contents. 
+
+
diff --git a/wasmlabs-build.sh b/wasmlabs-build.sh
index e08c362a..a4b4da96 100755
--- a/wasmlabs-build.sh
+++ b/wasmlabs-build.sh
@@ -8,21 +8,22 @@ fi
 
 if [[ ! -v WASMLABS_BUILD_OUTPUT ]]
 then
-    echo "Assuming $PWD/wasmlabs-build-output as WASMLABS_BUILD_OUTPUT"
-    export WASMLABS_BUILD_OUTPUT=$PWD/wasmlabs-build-output
+    echo "Assuming $PWD/wasmlabs-output as WASMLABS_BUILD_OUTPUT"
+    export WASMLABS_BUILD_OUTPUT=$PWD/wasmlabs-output
+    mkdir $WASMLABS_BUILD_OUTPUT 2>&1 >/dev/null
 fi
 
 function onExit {
     echo "=============================================================="
     echo "Build progress logs:"
-    cat wasmlabs-progress.log
+    cat $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
 }
 trap onExit EXIT
 
-echo "$(date --iso-8601=ns) | Using WASI_SDK_ROOT=$WASI_SDK_ROOT " > wasmlabs-progress.log
+echo "$(date --iso-8601=ns) | Using WASI_SDK_ROOT=$WASI_SDK_ROOT " >  $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
 
 function logStatus {
-    echo "$(date --iso-8601=ns) | $@" >> wasmlabs-progress.log
+    echo "$(date --iso-8601=ns) | $@" >>  $WASMLABS_BUILD_OUTPUT/wasmlabs-progress.log
 }
 
 export WASI_SYSROOT="${WASI_SDK_ROOT}/share/wasi-sysroot"
@@ -37,8 +38,8 @@ export RANLIB=${WASI_SDK_ROOT}/bin/llvm-ranlib
 # export CFLAGS_CONFIG="-O3 -g"
 export CFLAGS_CONFIG="-O2"
 
-export CFLAGS_WASI="--sysroot=${WASI_SYSROOT} -D_WASI_EMULATED_MMAN -D_WASI_EMULATED_GETPID -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_PROCESS_CLOCKS"
-export LDFLAGS_WASI="--sysroot=${WASI_SYSROOT} -lwasi-emulated-mman -lwasi-emulated-getpid -lwasi-emulated-signal -lwasi-emulated-process-clocks"
+export CFLAGS_WASI="--sysroot=${WASI_SYSROOT} -D_WASI_EMULATED_GETPID -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_PROCESS_CLOCKS"
+export LDFLAGS_WASI="--sysroot=${WASI_SYSROOT} -lwasi-emulated-getpid -lwasi-emulated-signal -lwasi-emulated-process-clocks"
 
 export CFLAGS_SQLITE='-DSQLITE_OMIT_LOAD_EXTENSION=1'
 export LDFLAGS_SQLITE='-lsqlite3'
-- 
2.38.1

