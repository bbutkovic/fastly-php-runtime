From 53c1a9297c56a42a6607367d6ea35e58ab097dc5 Mon Sep 17 00:00:00 2001
From: Asen Alexandrov <alexandrov@vmware.com>
Date: Tue, 22 Nov 2022 19:32:48 +0200
Subject: [PATCH 6/6] Add extensive debug prints for php_output


 100.0% main/
diff --git a/main/output.c b/main/output.c
index 70bc532f..84887ed7 100644
--- a/main/output.c
+++ b/main/output.c
@@ -26,6 +26,12 @@
 # define PHP_OUTPUT_NOINLINE 0
 #endif
 
+#if defined (PHP_OUTPUT_DEBUG) && PHP_OUTPUT_DEBUG == 1
+#define POD_PRINT(fmt, ...) fprintf(stderr, fmt __VA_OPT__(,) __VA_ARGS__)
+#else
+#define POD_PRINT(fmt, ...)
+#endif
+
 #include "php.h"
 #include "ext/standard/head.h"
 #include "ext/standard/url_scanner_ex.h"
@@ -79,6 +85,7 @@ static int php_output_handler_devnull_func(void **handler_context, php_output_co
  * Initialize the module globals on MINIT */
 static inline void php_output_init_globals(zend_output_globals *G)
 {
+	POD_PRINT("php_output_init_globals\n");
 	memset(G, 0, sizeof(*G));
 }
 /* }}} */
@@ -86,11 +93,13 @@ static inline void php_output_init_globals(zend_output_globals *G)
 /* {{{ stderr/stdout writer if not PHP_OUTPUT_ACTIVATED */
 static size_t php_output_stdout(const char *str, size_t str_len)
 {
+	POD_PRINT("php_output_stdout\n");
 	fwrite(str, 1, str_len, stdout);
 	return str_len;
 }
 static size_t php_output_stderr(const char *str, size_t str_len)
 {
+	POD_PRINT("php_output_stderr\n");
 	fwrite(str, 1, str_len, stderr);
 /* See http://support.microsoft.com/kb/190351 */
 #ifdef PHP_WIN32
@@ -104,6 +113,7 @@ static size_t (*php_output_direct)(const char *str, size_t str_len) = php_output
 /* {{{ void php_output_header(void) */
 static void php_output_header(void)
 {
+	POD_PRINT("php_output_header\n");
 	if (!SG(headers_sent)) {
 		if (!OG(output_start_filename)) {
 			if (zend_is_compiling()) {
@@ -114,7 +124,7 @@ static void php_output_header(void)
 				OG(output_start_lineno) = zend_get_executed_lineno();
 			}
 #if PHP_OUTPUT_DEBUG
-			fprintf(stderr, "!!! output started at: %s (%d)\n", OG(output_start_filename), OG(output_start_lineno));
+			POD_PRINT("!!! output started at: %s (%d)\n", OG(output_start_filename), OG(output_start_lineno));
 #endif
 		}
 		if (!php_header()) {
@@ -134,6 +144,7 @@ static void reverse_conflict_dtor(zval *zv)
  * Set up module globals and initialize the conflict and reverse conflict hash tables */
 PHPAPI void php_output_startup(void)
 {
+	POD_PRINT("php_output_startup\n");
 	ZEND_INIT_MODULE_GLOBALS(output, php_output_init_globals, NULL);
 	zend_hash_init(&php_output_handler_aliases, 8, NULL, NULL, 1);
 	zend_hash_init(&php_output_handler_conflicts, 8, NULL, NULL, 1);
@@ -146,6 +157,7 @@ PHPAPI void php_output_startup(void)
  * Destroy module globals and the conflict and reverse conflict hash tables */
 PHPAPI void php_output_shutdown(void)
 {
+	POD_PRINT("php_output_shutdown\n");
 	php_output_direct = php_output_stderr;
 	zend_hash_destroy(&php_output_handler_aliases);
 	zend_hash_destroy(&php_output_handler_conflicts);
@@ -157,6 +169,7 @@ PHPAPI void php_output_shutdown(void)
  * Reset output globals and setup the output handler stack */
 PHPAPI int php_output_activate(void)
 {
+	POD_PRINT("php_output_activate\n");
 #ifdef ZTS
 	memset(TSRMG_BULK_STATIC(output_globals_id, zend_output_globals*), 0, sizeof(zend_output_globals));
 #else
@@ -174,6 +187,7 @@ PHPAPI int php_output_activate(void)
  * Destroy the output handler stack */
 PHPAPI void php_output_deactivate(void)
 {
+	POD_PRINT("php_output_deactivate\n");
 	php_output_handler **handler = NULL;
 
 	if ((OG(flags) & PHP_OUTPUT_ACTIVATED)) {
@@ -198,6 +212,7 @@ PHPAPI void php_output_deactivate(void)
 /* {{{ void php_output_register_constants() */
 PHPAPI void php_output_register_constants(void)
 {
+	POD_PRINT("php_output_register_constants\n");
 	REGISTER_MAIN_LONG_CONSTANT("PHP_OUTPUT_HANDLER_START", PHP_OUTPUT_HANDLER_START, CONST_CS | CONST_PERSISTENT);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_OUTPUT_HANDLER_WRITE", PHP_OUTPUT_HANDLER_WRITE, CONST_CS | CONST_PERSISTENT);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_OUTPUT_HANDLER_FLUSH", PHP_OUTPUT_HANDLER_FLUSH, CONST_CS | CONST_PERSISTENT);
@@ -219,6 +234,7 @@ PHPAPI void php_output_register_constants(void)
  * Used by SAPIs to disable output */
 PHPAPI void php_output_set_status(int status)
 {
+	POD_PRINT("php_output_set_status\n");
 	OG(flags) = (OG(flags) & ~0xf) | (status & 0xf);
 }
 /* }}} */
@@ -227,6 +243,7 @@ PHPAPI void php_output_set_status(int status)
  * Get output control status */
 PHPAPI int php_output_get_status(void)
 {
+	POD_PRINT("php_output_get_status\n");
 	return (
 		OG(flags)
 		|	(OG(active) ? PHP_OUTPUT_ACTIVE : 0)
@@ -239,6 +256,7 @@ PHPAPI int php_output_get_status(void)
  * Unbuffered write */
 PHPAPI size_t php_output_write_unbuffered(const char *str, size_t len)
 {
+	POD_PRINT("php_output_write_unbuffered '%s'\n", str);
 	if (OG(flags) & PHP_OUTPUT_ACTIVATED) {
 		return sapi_module.ub_write(str, len);
 	}
@@ -250,6 +268,7 @@ PHPAPI size_t php_output_write_unbuffered(const char *str, size_t len)
  * Buffered write */
 PHPAPI size_t php_output_write(const char *str, size_t len)
 {
+	POD_PRINT("php_output_write '%s'\n", str);
 	if (OG(flags) & PHP_OUTPUT_ACTIVATED) {
 		php_output_op(PHP_OUTPUT_HANDLER_WRITE, str, len);
 		return len;
@@ -265,6 +284,7 @@ PHPAPI size_t php_output_write(const char *str, size_t len)
  * Flush the most recent output handlers buffer */
 PHPAPI int php_output_flush(void)
 {
+	POD_PRINT("php_output_flush\n");
 	php_output_context context;
 
 	if (OG(active) && (OG(active)->flags & PHP_OUTPUT_HANDLER_FLUSHABLE)) {
@@ -286,6 +306,7 @@ PHPAPI int php_output_flush(void)
  * Flush all output buffers subsequently */
 PHPAPI void php_output_flush_all(void)
 {
+	POD_PRINT("php_output_flush_all\n");
 	if (OG(active)) {
 		php_output_op(PHP_OUTPUT_HANDLER_FLUSH, NULL, 0);
 	}
@@ -296,6 +317,7 @@ PHPAPI void php_output_flush_all(void)
  * Cleans the most recent output handlers buffer if the handler is cleanable */
 PHPAPI int php_output_clean(void)
 {
+	POD_PRINT("php_output_clean\n");
 	php_output_context context;
 
 	if (OG(active) && (OG(active)->flags & PHP_OUTPUT_HANDLER_CLEANABLE)) {
@@ -312,6 +334,7 @@ PHPAPI int php_output_clean(void)
  * Cleans all output handler buffers, without regard whether the handler is cleanable */
 PHPAPI void php_output_clean_all(void)
 {
+	POD_PRINT("php_output_clean_all\n");
 	php_output_context context;
 
 	if (OG(active)) {
@@ -324,6 +347,7 @@ PHPAPI void php_output_clean_all(void)
  * Finalizes the most recent output handler at pops it off the stack if the handler is removable */
 PHPAPI int php_output_end(void)
 {
+	POD_PRINT("php_output_clean_all\n");
 	if (php_output_stack_pop(PHP_OUTPUT_POP_TRY)) {
 		return SUCCESS;
 	}
@@ -335,6 +359,7 @@ PHPAPI int php_output_end(void)
  * Finalizes all output handlers and ends output buffering without regard whether a handler is removable */
 PHPAPI void php_output_end_all(void)
 {
+	POD_PRINT("php_output_end_all\n");
 	while (OG(active) && php_output_stack_pop(PHP_OUTPUT_POP_FORCE));
 }
 /* }}} */
@@ -343,6 +368,7 @@ PHPAPI void php_output_end_all(void)
  * Discards the most recent output handlers buffer and pops it off the stack if the handler is removable */
 PHPAPI int php_output_discard(void)
 {
+	POD_PRINT("php_output_discard\n");
 	if (php_output_stack_pop(PHP_OUTPUT_POP_DISCARD|PHP_OUTPUT_POP_TRY)) {
 		return SUCCESS;
 	}
@@ -354,6 +380,7 @@ PHPAPI int php_output_discard(void)
  * Discard all output handlers and buffers without regard whether a handler is removable */
 PHPAPI void php_output_discard_all(void)
 {
+	POD_PRINT("php_output_discard_all\n");
 	while (OG(active)) {
 		php_output_stack_pop(PHP_OUTPUT_POP_DISCARD|PHP_OUTPUT_POP_FORCE);
 	}
@@ -364,6 +391,7 @@ PHPAPI void php_output_discard_all(void)
  * Get output buffering level, ie. how many output handlers the stack contains */
 PHPAPI int php_output_get_level(void)
 {
+	POD_PRINT("php_output_get_level\n");
 	return OG(active) ? zend_stack_count(&OG(handlers)) : 0;
 }
 /* }}} */
@@ -372,6 +400,7 @@ PHPAPI int php_output_get_level(void)
  * Get the contents of the active output handlers buffer */
 PHPAPI int php_output_get_contents(zval *p)
 {
+	POD_PRINT("php_output_get_contents\n");
 	if (OG(active)) {
 		ZVAL_STRINGL(p, OG(active)->buffer.data, OG(active)->buffer.used);
 		return SUCCESS;
@@ -385,6 +414,7 @@ PHPAPI int php_output_get_contents(zval *p)
  * Get the length of the active output handlers buffer */
 PHPAPI int php_output_get_length(zval *p)
 {
+	POD_PRINT("php_output_get_length\n");
 	if (OG(active)) {
 		ZVAL_LONG(p, OG(active)->buffer.used);
 		return SUCCESS;
@@ -399,6 +429,7 @@ PHPAPI int php_output_get_length(zval *p)
  * Get active output handler */
 PHPAPI php_output_handler* php_output_get_active_handler(void)
 {
+	POD_PRINT("php_output_get_active_handler\n");
 	return OG(active);
 }
 /* }}} */
@@ -407,6 +438,7 @@ PHPAPI php_output_handler* php_output_get_active_handler(void)
  * Start a "default output handler" */
 PHPAPI int php_output_start_default(void)
 {
+	POD_PRINT("php_output_start_default\n");
 	php_output_handler *handler;
 
 	handler = php_output_handler_create_internal(ZEND_STRL(php_output_default_handler_name), php_output_handler_default_func, 0, PHP_OUTPUT_HANDLER_STDFLAGS);
@@ -422,6 +454,7 @@ PHPAPI int php_output_start_default(void)
  * Start a "null output handler" */
 PHPAPI int php_output_start_devnull(void)
 {
+	POD_PRINT("php_output_start_devnull\n");
 	php_output_handler *handler;
 
 	handler = php_output_handler_create_internal(ZEND_STRL(php_output_devnull_handler_name), php_output_handler_devnull_func, PHP_OUTPUT_HANDLER_DEFAULT_SIZE, 0);
@@ -437,6 +470,7 @@ PHPAPI int php_output_start_devnull(void)
  * Start a user level output handler */
 PHPAPI int php_output_start_user(zval *output_handler, size_t chunk_size, int flags)
 {
+	POD_PRINT("php_output_start_user\n");
 	php_output_handler *handler;
 
 	if (output_handler) {
@@ -456,6 +490,7 @@ PHPAPI int php_output_start_user(zval *output_handler, size_t chunk_size, int fl
  * Start an internal output handler that does not have to maintain a non-global state */
 PHPAPI int php_output_start_internal(const char *name, size_t name_len, php_output_handler_func_t output_handler, size_t chunk_size, int flags)
 {
+	POD_PRINT("php_output_start_internal\n");
 	php_output_handler *handler;
 
 	handler = php_output_handler_create_internal(name, name_len, php_output_handler_compat_func, chunk_size, flags);
@@ -472,6 +507,7 @@ PHPAPI int php_output_start_internal(const char *name, size_t name_len, php_outp
  * Create a user level output handler */
 PHPAPI php_output_handler *php_output_handler_create_user(zval *output_handler, size_t chunk_size, int flags)
 {
+	POD_PRINT("php_output_handler_create_user\n");
 	zend_string *handler_name = NULL;
 	char *error = NULL;
 	php_output_handler *handler = NULL;
@@ -513,6 +549,7 @@ PHPAPI php_output_handler *php_output_handler_create_user(zval *output_handler,
  * Create an internal output handler that can maintain a non-global state */
 PHPAPI php_output_handler *php_output_handler_create_internal(const char *name, size_t name_len, php_output_handler_context_func_t output_handler, size_t chunk_size, int flags)
 {
+	POD_PRINT("php_output_handler_create_internal\n");
 	php_output_handler *handler;
 	zend_string *str = zend_string_init(name, name_len, 0);
 
@@ -528,6 +565,7 @@ PHPAPI php_output_handler *php_output_handler_create_internal(const char *name,
  * Set the context/state of an output handler. Calls the dtor of the previous context if there is one */
 PHPAPI void php_output_handler_set_context(php_output_handler *handler, void *opaq, void (*dtor)(void*))
 {
+	POD_PRINT("php_output_handler_set_context\n");
 	if (handler->dtor && handler->opaq) {
 		handler->dtor(handler->opaq);
 	}
@@ -540,6 +578,7 @@ PHPAPI void php_output_handler_set_context(php_output_handler *handler, void *op
  * Starts the set up output handler and pushes it on top of the stack. Checks for any conflicts regarding the output handler to start */
 PHPAPI int php_output_handler_start(php_output_handler *handler)
 {
+	POD_PRINT("php_output_handler_start\n");
 	HashTable *rconflicts;
 	php_output_handler_conflict_check_t conflict;
 
@@ -569,6 +608,7 @@ PHPAPI int php_output_handler_start(php_output_handler *handler)
  * Check whether a certain output handler is in use */
 PHPAPI int php_output_handler_started(const char *name, size_t name_len)
 {
+	POD_PRINT("php_output_handler_started\n");
 	php_output_handler **handlers;
 	int i, count = php_output_get_level();
 
@@ -590,6 +630,7 @@ PHPAPI int php_output_handler_started(const char *name, size_t name_len)
  * Check whether a certain handler is in use and issue a warning that the new handler would conflict with the already used one */
 PHPAPI int php_output_handler_conflict(const char *handler_new, size_t handler_new_len, const char *handler_set, size_t handler_set_len)
 {
+	POD_PRINT("php_output_handler_conflict\n");
 	if (php_output_handler_started(handler_set, handler_set_len)) {
 		if (handler_new_len != handler_set_len || memcmp(handler_new, handler_set, handler_set_len)) {
 			php_error_docref("ref.outcontrol", E_WARNING, "output handler '%s' conflicts with '%s'", handler_new, handler_set);
@@ -606,6 +647,7 @@ PHPAPI int php_output_handler_conflict(const char *handler_new, size_t handler_n
  * Register a conflict checking function on MINIT */
 PHPAPI int php_output_handler_conflict_register(const char *name, size_t name_len, php_output_handler_conflict_check_t check_func)
 {
+	POD_PRINT("php_output_handler_conflict_register\n");
 	zend_string *str;
 
 	if (!EG(current_module)) {
@@ -623,6 +665,7 @@ PHPAPI int php_output_handler_conflict_register(const char *name, size_t name_le
  * Register a reverse conflict checking function on MINIT */
 PHPAPI int php_output_handler_reverse_conflict_register(const char *name, size_t name_len, php_output_handler_conflict_check_t check_func)
 {
+	POD_PRINT("php_output_handler_reverse_conflict_register\n");
 	HashTable rev, *rev_ptr = NULL;
 
 	if (!EG(current_module)) {
@@ -652,6 +695,7 @@ PHPAPI int php_output_handler_reverse_conflict_register(const char *name, size_t
  * Get an internal output handler for a user handler if it exists */
 PHPAPI php_output_handler_alias_ctor_t php_output_handler_alias(const char *name, size_t name_len)
 {
+	POD_PRINT("php_output_handler_alias\n");
 	return zend_hash_str_find_ptr(&php_output_handler_aliases, name, name_len);
 }
 /* }}} */
@@ -660,6 +704,7 @@ PHPAPI php_output_handler_alias_ctor_t php_output_handler_alias(const char *name
  * Registers an internal output handler as alias for a user handler */
 PHPAPI int php_output_handler_alias_register(const char *name, size_t name_len, php_output_handler_alias_ctor_t func)
 {
+	POD_PRINT("php_output_handler_alias_register\n");
 	zend_string *str;
 
 	if (!EG(current_module)) {
@@ -677,6 +722,7 @@ PHPAPI int php_output_handler_alias_register(const char *name, size_t name_len,
  * Output handler hook for output handler functions to check/modify the current handlers abilities */
 PHPAPI int php_output_handler_hook(php_output_handler_hook_t type, void *arg)
 {
+	POD_PRINT("php_output_handler_hook\n");
 	if (OG(running)) {
 		switch (type) {
 			case PHP_OUTPUT_HANDLER_HOOK_GET_OPAQ:
@@ -706,6 +752,7 @@ PHPAPI int php_output_handler_hook(php_output_handler_hook_t type, void *arg)
  * Destroy an output handler */
 PHPAPI void php_output_handler_dtor(php_output_handler *handler)
 {
+	POD_PRINT("php_output_handler_dtor\n");
 	if (handler->name) {
 		zend_string_release_ex(handler->name, 0);
 	}
@@ -727,6 +774,7 @@ PHPAPI void php_output_handler_dtor(php_output_handler *handler)
  * Destroy and free an output handler */
 PHPAPI void php_output_handler_free(php_output_handler **h)
 {
+	POD_PRINT("php_output_handler_free\n");
 	if (*h) {
 		php_output_handler_dtor(*h);
 		efree(*h);
@@ -739,6 +787,7 @@ PHPAPI void php_output_handler_free(php_output_handler **h)
  * Enable or disable implicit flush */
 PHPAPI void php_output_set_implicit_flush(int flush)
 {
+	POD_PRINT("php_output_set_implicit_flush\n");
 	if (flush) {
 		OG(flags) |= PHP_OUTPUT_IMPLICITFLUSH;
 	} else {
@@ -751,6 +800,7 @@ PHPAPI void php_output_set_implicit_flush(int flush)
  * Get the file name where output has started */
 PHPAPI const char *php_output_get_start_filename(void)
 {
+	POD_PRINT("php_output_get_start_filename\n");
 	return OG(output_start_filename);
 }
 /* }}} */
@@ -759,6 +809,7 @@ PHPAPI const char *php_output_get_start_filename(void)
  * Get the line number where output has started */
 PHPAPI int php_output_get_start_lineno(void)
 {
+	POD_PRINT("php_output_get_start_lineno\n");
 	return OG(output_start_lineno);
 }
 /* }}} */
@@ -767,6 +818,7 @@ PHPAPI int php_output_get_start_lineno(void)
  * Checks whether an unallowed operation is attempted from within the output handler and issues a fatal error */
 static inline int php_output_lock_error(int op)
 {
+	POD_PRINT("php_output_lock_error\n");
 	/* if there's no ob active, ob has been stopped */
 	if (op && OG(active) && OG(running)) {
 		/* fatal error */
@@ -782,6 +834,7 @@ static inline int php_output_lock_error(int op)
  * Initialize a new output context */
 static inline void php_output_context_init(php_output_context *context, int op)
 {
+	POD_PRINT("php_output_context_init\n");
 	memset(context, 0, sizeof(php_output_context));
 	context->op = op;
 }
@@ -791,6 +844,7 @@ static inline void php_output_context_init(php_output_context *context, int op)
  * Reset an output context */
 static inline void php_output_context_reset(php_output_context *context)
 {
+	POD_PRINT("php_output_context_reset\n");
 	int op = context->op;
 	php_output_context_dtor(context);
 	memset(context, 0, sizeof(php_output_context));
@@ -802,6 +856,7 @@ static inline void php_output_context_reset(php_output_context *context)
  * Feed output contexts input buffer */
 static inline void php_output_context_feed(php_output_context *context, char *data, size_t size, size_t used, zend_bool free)
 {
+	POD_PRINT("php_output_context_feed\n");
 	if (context->in.free && context->in.data) {
 		efree(context->in.data);
 	}
@@ -816,6 +871,7 @@ static inline void php_output_context_feed(php_output_context *context, char *da
  * Swap output contexts buffers */
 static inline void php_output_context_swap(php_output_context *context)
 {
+	POD_PRINT("php_output_context_swap\n");
 	if (context->in.free && context->in.data) {
 		efree(context->in.data);
 	}
@@ -834,6 +890,7 @@ static inline void php_output_context_swap(php_output_context *context)
  * Pass input to output buffer */
 static inline void php_output_context_pass(php_output_context *context)
 {
+	POD_PRINT("php_output_context_pass\n");
 	context->out.data = context->in.data;
 	context->out.used = context->in.used;
 	context->out.size = context->in.size;
@@ -849,6 +906,7 @@ static inline void php_output_context_pass(php_output_context *context)
  * Destroy the contents of an output context */
 static inline void php_output_context_dtor(php_output_context *context)
 {
+	POD_PRINT("php_output_context_dtor\n3");
 	if (context->in.free && context->in.data) {
 		efree(context->in.data);
 		context->in.data = NULL;
@@ -864,6 +922,7 @@ static inline void php_output_context_dtor(php_output_context *context)
  * Allocates and initializes a php_output_handler structure */
 static inline php_output_handler *php_output_handler_init(zend_string *name, size_t chunk_size, int flags)
 {
+	POD_PRINT("php_output_handler_init\n");
 	php_output_handler *handler;
 
 	handler = ecalloc(1, sizeof(php_output_handler));
@@ -881,6 +940,7 @@ static inline php_output_handler *php_output_handler_init(zend_string *name, siz
  * Appends input to the output handlers buffer and indicates whether the buffer does not have to be processed by the output handler */
 static inline int php_output_handler_append(php_output_handler *handler, const php_output_buffer *buf)
 {
+	POD_PRINT("php_output_handler_append\n");
 	if (buf->used) {
 		OG(flags) |= PHP_OUTPUT_WRITTEN;
 		/* store it away */
@@ -909,11 +969,12 @@ static inline int php_output_handler_append(php_output_handler *handler, const p
  * Output handler operation dispatcher, applying context op to the php_output_handler handler */
 static inline php_output_handler_status_t php_output_handler_op(php_output_handler *handler, php_output_context *context)
 {
+	POD_PRINT("php_output_handler_op\n");
 	php_output_handler_status_t status;
 	int original_op = context->op;
 
 #if PHP_OUTPUT_DEBUG
-	fprintf(stderr, ">>> op(%d, "
+	POD_PRINT(">>> op(%d, "
 					"handler=%p, "
 					"name=%s, "
 					"flags=%d, "
@@ -1034,6 +1095,7 @@ static inline php_output_handler_status_t php_output_handler_op(php_output_handl
  * Output op dispatcher, passes input and output handlers output through the output handler stack until it gets written to the SAPI */
 static inline void php_output_op(int op, const char *str, size_t len)
 {
+	POD_PRINT("php_output_op %d '%s'\n", op, str);
 	php_output_context context;
 	php_output_handler **active;
 	int obh_cnt;
@@ -1070,7 +1132,7 @@ static inline void php_output_op(int op, const char *str, size_t len)
 
 		if (!(OG(flags) & PHP_OUTPUT_DISABLED)) {
 #if PHP_OUTPUT_DEBUG
-			fprintf(stderr, "::: sapi_write('%s', %zu)\n", context.out.data, context.out.used);
+			POD_PRINT("::: sapi_write('%s', %zu)\n", context.out.data, context.out.used);
 #endif
 			sapi_module.ub_write(context.out.data, context.out.used);
 
@@ -1089,6 +1151,7 @@ static inline void php_output_op(int op, const char *str, size_t len)
  * Operation callback for the stack apply function */
 static int php_output_stack_apply_op(void *h, void *c)
 {
+	POD_PRINT("php_output_stack_apply_op\n");
 	int was_disabled;
 	php_output_handler_status_t status;
 	php_output_handler *handler = *(php_output_handler **) h;
@@ -1137,6 +1200,7 @@ static int php_output_stack_apply_op(void *h, void *c)
  * Clean callback for the stack apply function */
 static int php_output_stack_apply_clean(void *h, void *c)
 {
+	POD_PRINT("php_output_stack_apply_clean\n");
 	php_output_handler *handler = *(php_output_handler **) h;
 	php_output_context *context = (php_output_context *) c;
 
@@ -1151,6 +1215,7 @@ static int php_output_stack_apply_clean(void *h, void *c)
  * List callback for the stack apply function */
 static int php_output_stack_apply_list(void *h, void *z)
 {
+	POD_PRINT("php_output_stack_apply_list\n");
 	php_output_handler *handler = *(php_output_handler **) h;
 	zval *array = (zval *) z;
 
@@ -1163,6 +1228,7 @@ static int php_output_stack_apply_list(void *h, void *z)
  * Status callback for the stack apply function */
 static int php_output_stack_apply_status(void *h, void *z)
 {
+	POD_PRINT("php_output_stack_apply_status\n");
 	php_output_handler *handler = *(php_output_handler **) h;
 	zval arr, *array = (zval *) z;
 
@@ -1175,6 +1241,7 @@ static int php_output_stack_apply_status(void *h, void *z)
  * Returns an array with the status of the output handler */
 static inline zval *php_output_handler_status(php_output_handler *handler, zval *entry)
 {
+	POD_PRINT("php_output_handler_status\n");
 	ZEND_ASSERT(entry != NULL);
 
 	array_init(entry);
@@ -1194,6 +1261,7 @@ static inline zval *php_output_handler_status(php_output_handler *handler, zval
  * Pops an output handler off the stack */
 static int php_output_stack_pop(int flags)
 {
+	POD_PRINT("php_output_stack_pop\n");
 	php_output_context context;
 	php_output_handler **current, *orphan = OG(active);
 
@@ -1249,6 +1317,7 @@ static int php_output_stack_pop(int flags)
  * php_output_handler_context_func_t for php_output_handler_func_t output handlers */
 static int php_output_handler_compat_func(void **handler_context, php_output_context *output_context)
 {
+	POD_PRINT("php_output_handler_compat_func\n");
 	php_output_handler_func_t func = *(php_output_handler_func_t *) handler_context;
 
 	if (func) {
@@ -1275,6 +1344,7 @@ static int php_output_handler_compat_func(void **handler_context, php_output_con
  * Default output handler */
 static int php_output_handler_default_func(void **handler_context, php_output_context *output_context)
 {
+	POD_PRINT("php_output_handler_default_func\n");
 	php_output_context_pass(output_context);
 	return SUCCESS;
 }
@@ -1284,6 +1354,7 @@ static int php_output_handler_default_func(void **handler_context, php_output_co
  * Null output handler */
 static int php_output_handler_devnull_func(void **handler_context, php_output_context *output_context)
 {
+	POD_PRINT("php_output_handler_devnull_func\n");
 	return SUCCESS;
 }
 /* }}} */
@@ -1296,6 +1367,7 @@ static int php_output_handler_devnull_func(void **handler_context, php_output_co
    Turn on Output Buffering (specifying an optional output handler). */
 PHP_FUNCTION(ob_start)
 {
+	POD_PRINT("ob_start\n");
 	zval *output_handler = NULL;
 	zend_long chunk_size = 0;
 	zend_long flags = PHP_OUTPUT_HANDLER_STDFLAGS;
@@ -1320,6 +1392,7 @@ PHP_FUNCTION(ob_start)
    Flush (send) contents of the output buffer. The last buffer content is sent to next buffer */
 PHP_FUNCTION(ob_flush)
 {
+	POD_PRINT("ob_flush\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1341,6 +1414,7 @@ PHP_FUNCTION(ob_flush)
    Clean (delete) the current output buffer */
 PHP_FUNCTION(ob_clean)
 {
+	POD_PRINT("ob_clean\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1362,6 +1436,7 @@ PHP_FUNCTION(ob_clean)
    Flush (send) the output buffer, and delete current output buffer */
 PHP_FUNCTION(ob_end_flush)
 {
+	POD_PRINT("ob_end_flush\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1379,6 +1454,7 @@ PHP_FUNCTION(ob_end_flush)
    Clean the output buffer, and delete current output buffer */
 PHP_FUNCTION(ob_end_clean)
 {
+	POD_PRINT("ob_end_clean\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1396,6 +1472,7 @@ PHP_FUNCTION(ob_end_clean)
    Get current buffer contents, flush (send) the output buffer, and delete current output buffer */
 PHP_FUNCTION(ob_get_flush)
 {
+	POD_PRINT("ob_get_flush\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1415,6 +1492,7 @@ PHP_FUNCTION(ob_get_flush)
    Get current buffer contents and delete current output buffer */
 PHP_FUNCTION(ob_get_clean)
 {
+	POD_PRINT("ob_get_clean\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1438,6 +1516,7 @@ PHP_FUNCTION(ob_get_clean)
    Return the contents of the output buffer */
 PHP_FUNCTION(ob_get_contents)
 {
+	POD_PRINT("ob_get_contents\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1452,6 +1531,7 @@ PHP_FUNCTION(ob_get_contents)
    Return the nesting level of the output buffer */
 PHP_FUNCTION(ob_get_level)
 {
+	POD_PRINT("ob_get_level\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1464,6 +1544,7 @@ PHP_FUNCTION(ob_get_level)
    Return the length of the output buffer */
 PHP_FUNCTION(ob_get_length)
 {
+	POD_PRINT("ob_get_length\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1478,6 +1559,7 @@ PHP_FUNCTION(ob_get_length)
    List all output_buffers in an array */
 PHP_FUNCTION(ob_list_handlers)
 {
+	POD_PRINT("ob_list_handlers\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1496,6 +1578,7 @@ PHP_FUNCTION(ob_list_handlers)
    Return the status of the active or all output buffers */
 PHP_FUNCTION(ob_get_status)
 {
+	POD_PRINT("ob_get_status\n");
 	zend_bool full_status = 0;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|b", &full_status) == FAILURE) {
@@ -1520,6 +1603,7 @@ PHP_FUNCTION(ob_get_status)
    Turn implicit flush on/off and is equivalent to calling flush() after every output call */
 PHP_FUNCTION(ob_implicit_flush)
 {
+	POD_PRINT("ob_implicit_flush\n");
 	zend_long flag = 1;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|l", &flag) == FAILURE) {
@@ -1534,6 +1618,7 @@ PHP_FUNCTION(ob_implicit_flush)
    Reset(clear) URL rewriter values */
 PHP_FUNCTION(output_reset_rewrite_vars)
 {
+	POD_PRINT("output_reset_rewrite_vars\n");
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
@@ -1550,6 +1635,7 @@ PHP_FUNCTION(output_reset_rewrite_vars)
    Add URL rewriter values */
 PHP_FUNCTION(output_add_rewrite_var)
 {
+	POD_PRINT("output_add_rewrite_var\n");
 	char *name, *value;
 	size_t name_len, value_len;
 
-- 
2.38.1

